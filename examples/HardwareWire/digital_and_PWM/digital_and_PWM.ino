// ПРИМЕР УСТАНОВКИ УРОВНЕЙ И ШИМ НА ВЫВОДАХ:   //
                                                //
// Multi Servo Shield на 16 сервоприводов:      // https://iarduino.ru/shop/Expansion-payments/multi-servo-shield-na-16-servoprivodov.html
// Информация о подключении модулей к шине I2C: // https://wiki.iarduino.ru/page/i2c_connection/
// Информация о модуле и описание библиотеки:   // https://wiki.iarduino.ru/page/multi-servo-shield-na-16-servoprivodov/
// Сервопривод SERVO_SG90                       // https://iarduino.ru/shop/Mehanika/mikroservoprivod---1-6-kg-sm.html
// Сервопривод SERVO_MG90                       // https://iarduino.ru/shop/Mehanika/mg995r-pro-servo.html
// Сервопривод SERVO_MG996R                     // https://iarduino.ru/shop/Mehanika/mg995r-pro-servo.html
// Сервопривод SERVO_FutabaS3003                // https://iarduino.ru/shop/Mehanika/futaba-s3003.html
                                                //
#include <Wire.h>                               // Подключаем библиотеку для работы с аппаратной шиной I2C, до подключения библиотеки iarduino_MultiServo.
#include <iarduino_MultiServo.h>                // Подключаем библиотеку iarduino_MultiServo.
iarduino_MultiServo MSS;                        // Объявляем объект MSS, для работы с Multi Servo Shield на 16 сервоприводов используя библиотеку iarduino_MultiServo.
                                                //
void setup(){                                   //
     MSS.begin(&Wire, 0x40, 1000);              // Инициируем работу с модулем, указав: ссылку на объект для работы с шиной I2C на которой находится модуль, адрес модуля на шине I2C, частота сигнала ШИМ от 1 до 1526 Гц.
//   MSS.begin();                               // Все указанные параметры являются не обязательными, по умолчанию: шина &Wire, адрес 0x40, частота 1000 Гц.
}                                               //
                                                //
void loop(){                                    //
     MSS.digitalWrite(5, LOW);                  // Устанавливаем на 5 выводе     низкий  уровень (уровень логического «0»).
     MSS.digitalWrite(6, HIGH);                 // Устанавливаем на 6 выводе     высокий уровень (уровень логической  «1»).
     MSS.digitalWrite(SERVO_ALL, LOW);          // Устанавливаем на всех выводах низкий  уровень (уровень логического «0»).
     MSS.digitalWrite(SERVO_ALL, HIGH);         // Устанавливаем на всех выводах высокий уровень (уровень логической  «1»).
     MSS.analogWrite(0, 1023);                  // Устанавливаем на 0 выводе     сигнал ШИМ с коэффициентом заполнения 1023 (25%) , допускаются значения от 0 до 4095.
     MSS.analogWrite(1, 2047);                  // Устанавливаем на 1 выводе     сигнал ШИМ с коэффициентом заполнения 2047 (50%) , допускаются значения от 0 до 4095.
     MSS.analogWrite(SERVO_ALL, 3071);          // Устанавливаем на всех выводах сигнал ШИМ с коэффициентом заполнения 3071 (75%) , допускаются значения от 0 до 4095.
     MSS.analogWrite(10, 4095);                 // Устанавливаем на 10 выводе    сигнал ШИМ с коэффициентом заполнения 4095 (100%), допускаются значения от 0 до 4095.
     MSS.analogWrite(2, 2047, 1023);            // Устанавливаем на 2 выводе     сигнал ШИМ с коэффициентом заполнения 2047 (50%) , допускаются значения от 0 до 4095.
                                                // и фазовым сдвигом 1023 (25%),  допускаются значения от 0 до 4095.
                                                // Фазовый сдвиг - необязательный параметр указывается от 0 до 4095 (по умолчанию 0).
                                                // устанавливает задержку сигнала ШИМ по отношению к другим выводам, но не влияет на коэффициент заполнения.
     MSS.analogRead(5);                         // Читаем ранее установленный коэффициент заполнения ШИМ на выводе 5.
                                                // если на выводе был установлен низкий  уровень (LOW),  то функция вернёт 0.
                                                // если на выводе был установлен высокий уровень (HIGH), то функция вернёт 4096.
}                                               // в нашем случае, функция вернёт 3071.